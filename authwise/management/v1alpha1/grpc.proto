// GENERATED BY go:generate. DO NOT EDIT.

syntax = "proto3";
package authwise.management.v1alpha1;

import "google/api/annotations.proto";
import "authwise/auth/v1alpha1/auth.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/authwisecom/api-client-go/authwise/management/v1alpha1";

service AuthwiseManagementService {
  rpc GetTenant(GetTenantRequest) returns (authwise.auth.v1alpha1.Tenant) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*}" 
    };
  }

  rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants"
    };
  }

  rpc CreateTenant(CreateTenantRequest) returns (authwise.auth.v1alpha1.Tenant) {
    option (google.api.http) = {
      post: "/v1/tenants"
      body: "*"
    };
  }

  rpc UpdateTenant(UpdateTenantRequest) returns (authwise.auth.v1alpha1.Tenant) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*}" 
      body: "*"
    };
  }

  rpc DeleteTenant(DeleteTenantRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*}" 
    };
  }

  rpc GetTenantConfig(GetTenantConfigRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/v1/{name=tenants/*}/config"
    };
  }

  rpc UpdateTenantConfig(UpdateTenantConfigRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*}/config"
      body: "*"
    };
  }

  rpc GetTenantUrl(GetTenantUrlRequest) returns (authwise.auth.v1alpha1.TenantUrl) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/tenant_urls/*}" 
    };
  }

  rpc ListTenantUrls(ListTenantUrlsRequest) returns (ListTenantUrlsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/tenant_urls"
    };
  }

  rpc CreateTenantUrl(CreateTenantUrlRequest) returns (authwise.auth.v1alpha1.TenantUrl) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/tenant_urls"
      body: "*"
    };
  }

  rpc UpdateTenantUrl(UpdateTenantUrlRequest) returns (authwise.auth.v1alpha1.TenantUrl) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/tenant_urls/*}" 
      body: "*"
    };
  }

  rpc DeleteTenantUrl(DeleteTenantUrlRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/tenant_urls/*}" 
    };
  }

  rpc GetTenantUrlConfig(GetTenantUrlConfigRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/v1/{name=tenants/*/tenant_urls/*}/config"
    };
  }

  rpc UpdateTenantUrlConfig(UpdateTenantUrlConfigRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/tenant_urls/*}/config"
      body: "*"
    };
  }

  rpc GetUser(GetUserRequest) returns (authwise.auth.v1alpha1.User) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/realms/*/users/*}" 
    };
  }

  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/realms/*}/users"
    };
  }

  rpc UserSearchPredicates(UserSearchPredicatesRequest) returns (UserSearchPredicatesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/realms/*}/users/search/predicates"
    };
  }

  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse) {
    option (google.api.http) = {
        post: "/v1/{parent=tenants/*/realms/*}/users/search" 
        body: "*"
    };
  }

  rpc CreateUser(CreateUserRequest) returns (authwise.auth.v1alpha1.User) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/realms/*}/users"
      body: "*"
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (authwise.auth.v1alpha1.User) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/realms/*/users/*}" 
      body: "*"
    };
  }

  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/realms/*/users/*}" 
    };
  }

  rpc ListRolesByUser (ListRolesByUserRequest) returns (ListRolesByUserResponse) {
    option (google.api.http) = {
      get: "/v1/{name=tenants/*/realms/*/users/*/audiences/*}/roles"
    };
  }
				
  rpc AssociateRolesToUser (AssociateRolesToUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/realms/*/users/*/audiences/*}/roles"
      body: "*"
    };
  }
		
  rpc GetProvider(GetProviderRequest) returns (authwise.auth.v1alpha1.Provider) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/realms/*/providers/*}" 
    };
  }

  rpc ListProviders(ListProvidersRequest) returns (ListProvidersResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/realms/*}/providers"
    };
  }

  rpc CreateProvider(CreateProviderRequest) returns (authwise.auth.v1alpha1.Provider) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/realms/*}/providers"
      body: "*"
    };
  }

  rpc UpdateProvider(UpdateProviderRequest) returns (authwise.auth.v1alpha1.Provider) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/realms/*/providers/*}" 
      body: "*"
    };
  }

  rpc DeleteProvider(DeleteProviderRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/realms/*/providers/*}" 
    };
  }

  rpc GetProviderConfig(GetProviderConfigRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/v1/{name=tenants/*/realms/*/providers/*}/config"
    };
  }

  rpc UpdateProviderConfig(UpdateProviderConfigRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/realms/*/providers/*}/config"
      body: "*"
    };
  }

  rpc GetRealm(GetRealmRequest) returns (authwise.auth.v1alpha1.Realm) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/realms/*}" 
    };
  }

  rpc ListRealms(ListRealmsRequest) returns (ListRealmsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/realms"
    };
  }

  rpc CreateRealm(CreateRealmRequest) returns (authwise.auth.v1alpha1.Realm) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/realms"
      body: "*"
    };
  }

  rpc UpdateRealm(UpdateRealmRequest) returns (authwise.auth.v1alpha1.Realm) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/realms/*}" 
      body: "*"
    };
  }

  rpc DeleteRealm(DeleteRealmRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/realms/*}" 
    };
  }

  rpc GetClient(GetClientRequest) returns (authwise.auth.v1alpha1.Client) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/clients/*}" 
    };
  }

  rpc ListClients(ListClientsRequest) returns (ListClientsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/clients"
    };
  }

  rpc ListProvidersByClient (ListProvidersByClientRequest) returns (ListProvidersByClientResponse) {
    option (google.api.http) = {
      get: "/v1/{name=tenants/*/clients/*}/providers"
    };
  }
				
  rpc AssociateProvidersToClient (AssociateProvidersToClientRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/clients/*}/providers"
      body: "*"
    };
  }
		
  rpc CreateClient(CreateClientRequest) returns (authwise.auth.v1alpha1.Client) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/clients"
      body: "*"
    };
  }

  rpc UpdateClient(UpdateClientRequest) returns (authwise.auth.v1alpha1.Client) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/clients/*}" 
      body: "*"
    };
  }

  rpc DeleteClient(DeleteClientRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/clients/*}" 
    };
  }

  rpc GetClientConfig(GetClientConfigRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/v1/{name=tenants/*/clients/*}/config"
    };
  }

  rpc UpdateClientConfig(UpdateClientConfigRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/clients/*}/config"
      body: "*"
    };
  }

  rpc GetRole(GetRoleRequest) returns (authwise.auth.v1alpha1.Role) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/audiences/*/roles/*}" 
    };
  }

  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/audiences/*}/roles"
    };
  }

  rpc ListPermissionsByRole (ListPermissionsByRoleRequest) returns (ListPermissionsByRoleResponse) {
    option (google.api.http) = {
      get: "/v1/{name=tenants/*/audiences/*/roles/*}/permissions"
    };
  }
				
  rpc AssociatePermissionsToRole (AssociatePermissionsToRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/audiences/*/roles/*}/permissions"
      body: "*"
    };
  }
		
  rpc CreateRole(CreateRoleRequest) returns (authwise.auth.v1alpha1.Role) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/audiences/*}/roles"
      body: "*"
    };
  }

  rpc UpdateRole(UpdateRoleRequest) returns (authwise.auth.v1alpha1.Role) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/audiences/*/roles/*}" 
      body: "*"
    };
  }

  rpc DeleteRole(DeleteRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/audiences/*/roles/*}" 
    };
  }

  rpc GetPermission(GetPermissionRequest) returns (authwise.auth.v1alpha1.Permission) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/audiences/*/permissions/*}" 
    };
  }

  rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/audiences/*}/permissions"
    };
  }

  rpc CreatePermission(CreatePermissionRequest) returns (authwise.auth.v1alpha1.Permission) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/audiences/*}/permissions"
      body: "*"
    };
  }

  rpc UpdatePermission(UpdatePermissionRequest) returns (authwise.auth.v1alpha1.Permission) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/audiences/*/permissions/*}" 
      body: "*"
    };
  }

  rpc DeletePermission(DeletePermissionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/audiences/*/permissions/*}" 
    };
  }

  rpc GetAudience(GetAudienceRequest) returns (authwise.auth.v1alpha1.Audience) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/audiences/*}" 
    };
  }

  rpc ListAudiences(ListAudiencesRequest) returns (ListAudiencesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/audiences"
    };
  }

  rpc CreateAudience(CreateAudienceRequest) returns (authwise.auth.v1alpha1.Audience) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/audiences"
      body: "*"
    };
  }

  rpc UpdateAudience(UpdateAudienceRequest) returns (authwise.auth.v1alpha1.Audience) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/audiences/*}" 
      body: "*"
    };
  }

  rpc DeleteAudience(DeleteAudienceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/audiences/*}" 
    };
  }

  rpc GetScope(GetScopeRequest) returns (authwise.auth.v1alpha1.Scope) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/audiences/*/scopes/*}" 
    };
  }

  rpc ListScopes(ListScopesRequest) returns (ListScopesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/audiences/*}/scopes"
    };
  }

  rpc ListPermissionsByScope (ListPermissionsByScopeRequest) returns (ListPermissionsByScopeResponse) {
    option (google.api.http) = {
      get: "/v1/{name=tenants/*/audiences/*/scopes/*}/permissions"
    };
  }
				
  rpc AssociatePermissionsToScope (AssociatePermissionsToScopeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/audiences/*/scopes/*}/permissions"
      body: "*"
    };
  }
		
  rpc CreateScope(CreateScopeRequest) returns (authwise.auth.v1alpha1.Scope) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/audiences/*}/scopes"
      body: "*"
    };
  }

  rpc UpdateScope(UpdateScopeRequest) returns (authwise.auth.v1alpha1.Scope) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/audiences/*/scopes/*}" 
      body: "*"
    };
  }

  rpc DeleteScope(DeleteScopeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/audiences/*/scopes/*}" 
    };
  }

  rpc GetEvent(GetEventRequest) returns (authwise.auth.v1alpha1.Event) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/events/*}" 
    };
  }

  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/events"
    };
  }

  rpc GetAppearanceProfile(GetAppearanceProfileRequest) returns (authwise.auth.v1alpha1.AppearanceProfile) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/appearance_profiles/*}" 
    };
  }

  rpc ListAppearanceProfiles(ListAppearanceProfilesRequest) returns (ListAppearanceProfilesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/appearance_profiles"
    };
  }

  rpc CreateAppearanceProfile(CreateAppearanceProfileRequest) returns (authwise.auth.v1alpha1.AppearanceProfile) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/appearance_profiles"
      body: "*"
    };
  }

  rpc UpdateAppearanceProfile(UpdateAppearanceProfileRequest) returns (authwise.auth.v1alpha1.AppearanceProfile) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/appearance_profiles/*}" 
      body: "*"
    };
  }

  rpc DeleteAppearanceProfile(DeleteAppearanceProfileRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/appearance_profiles/*}" 
    };
  }

  rpc GetTheme(GetThemeRequest) returns (authwise.auth.v1alpha1.Theme) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/themes/*}" 
    };
  }

  rpc ListThemes(ListThemesRequest) returns (ListThemesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/themes"
    };
  }

  rpc CreateTheme(CreateThemeRequest) returns (authwise.auth.v1alpha1.Theme) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/themes"
      body: "*"
    };
  }

  rpc UpdateTheme(UpdateThemeRequest) returns (authwise.auth.v1alpha1.Theme) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/themes/*}" 
      body: "*"
    };
  }

  rpc DeleteTheme(DeleteThemeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/themes/*}" 
    };
  }

}
message GetTenantRequest {
  string name = 1;
}

message ListTenantsRequest {
  int32 page_size = 1;
  string page_token = 2;
  string order_by = 3;
}

message ListTenantsResponse {
  repeated authwise.auth.v1alpha1.Tenant tenants = 1;
  string next_page_token = 2;
}

message CreateTenantRequest {
  authwise.auth.v1alpha1.Tenant tenant = 1;
  string url = 2;
  string admin_user_id = 3;
  bool create_default_realm = 4;
  bool create_default_audience = 5;
  bool create_default_appearance_profile = 6;
  bool create_default_login_client = 7;
  bool create_admin_client_credentials_client = 8;
}

message UpdateTenantRequest {
  string name = 1;
  authwise.auth.v1alpha1.Tenant tenant = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message DeleteTenantRequest {
  string name = 1;
}


message GetTenantConfigRequest {
  string name = 1;
}


message UpdateTenantConfigRequest {
  string name = 1;
  authwise.auth.v1alpha1.UpdateConfigOperations operations = 2;
}


message GetTenantUrlRequest {
  string name = 1;
}

message ListTenantUrlsRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListTenantUrlsResponse {
  repeated authwise.auth.v1alpha1.TenantUrl tenant_urls = 1;
  string next_page_token = 2;
}

message CreateTenantUrlRequest {
  string parent = 1;
  authwise.auth.v1alpha1.TenantUrl tenant_url = 2;
}

message UpdateTenantUrlRequest {
  string name = 1;
  authwise.auth.v1alpha1.TenantUrl tenant_url = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message DeleteTenantUrlRequest {
  string name = 1;
}


message GetTenantUrlConfigRequest {
  string name = 1;
}


message UpdateTenantUrlConfigRequest {
  string name = 1;
  authwise.auth.v1alpha1.UpdateConfigOperations operations = 2;
}


message GetUserRequest {
  string name = 1;
}

message ListUsersRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListUsersResponse {
  repeated authwise.auth.v1alpha1.User users = 1;
  string next_page_token = 2;
}

message SearchUsersRequest {
  string parent = 1;
  int32 page_size = 2; 
  string page_token = 3;
  string order_by = 4;
  repeated authwise.auth.v1alpha1.SearchPredicate criteria = 5;
}

message UserSearchResult {
  float score = 1;
  authwise.auth.v1alpha1.User entity = 2;
}

message UserSearchPredicatesRequest {
  string parent = 6;
}

message UserSearchPredicatesResponse {
  repeated authwise.auth.v1alpha1.SearchPredicateDescriptor predicates = 1;
}

message SearchUsersResponse {
  repeated UserSearchResult list = 1;
  string next_page_token = 2;
}

message CreateUserRequest {
  string parent = 1;
  authwise.auth.v1alpha1.User user = 2;
}

message UpdateUserRequest {
  string name = 1;
  authwise.auth.v1alpha1.User user = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message DeleteUserRequest {
  string name = 1;
}


message ListRolesByUserRequest {
  string name = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListRolesByUserResponse {
  repeated authwise.auth.v1alpha1.Role roles = 1;
  string next_page_token = 2;
}

message AssociateRolesToUserRequest {
  string name = 1;
  authwise.auth.v1alpha1.AssociationRequest association = 2;
}

		
message GetProviderRequest {
  string name = 1;
}

message ListProvidersRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListProvidersResponse {
  repeated authwise.auth.v1alpha1.Provider providers = 1;
  string next_page_token = 2;
}

message CreateProviderRequest {
  string parent = 1;
  authwise.auth.v1alpha1.Provider provider = 2;
}

message UpdateProviderRequest {
  string name = 1;
  authwise.auth.v1alpha1.Provider provider = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message DeleteProviderRequest {
  string name = 1;
}


message GetProviderConfigRequest {
  string name = 1;
}


message UpdateProviderConfigRequest {
  string name = 1;
  authwise.auth.v1alpha1.UpdateConfigOperations operations = 2;
}


message GetRealmRequest {
  string name = 1;
}

message ListRealmsRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListRealmsResponse {
  repeated authwise.auth.v1alpha1.Realm realms = 1;
  string next_page_token = 2;
}

message CreateRealmRequest {
  string parent = 1;
  authwise.auth.v1alpha1.Realm realm = 2;
  bool create_default_providers = 3;
}

message UpdateRealmRequest {
  string name = 1;
  authwise.auth.v1alpha1.Realm realm = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message DeleteRealmRequest {
  string name = 1;
}


message GetClientRequest {
  string name = 1;
}

message ListClientsRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListClientsResponse {
  repeated authwise.auth.v1alpha1.Client clients = 1;
  string next_page_token = 2;
}

message ListProvidersByClientRequest {
  string name = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListProvidersByClientResponse {
  repeated authwise.auth.v1alpha1.Provider providers = 1;
  string next_page_token = 2;
}

message AssociateProvidersToClientRequest {
  string name = 1;
  authwise.auth.v1alpha1.AssociationRequest association = 2;
}

		
message CreateClientRequest {
  string parent = 1;
  authwise.auth.v1alpha1.Client client = 2;
}

message UpdateClientRequest {
  string name = 1;
  authwise.auth.v1alpha1.Client client = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message DeleteClientRequest {
  string name = 1;
}


message GetClientConfigRequest {
  string name = 1;
}


message UpdateClientConfigRequest {
  string name = 1;
  authwise.auth.v1alpha1.UpdateConfigOperations operations = 2;
}


message GetRoleRequest {
  string name = 1;
}

message ListRolesRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListRolesResponse {
  repeated authwise.auth.v1alpha1.Role roles = 1;
  string next_page_token = 2;
}

message ListPermissionsByRoleRequest {
  string name = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListPermissionsByRoleResponse {
  repeated authwise.auth.v1alpha1.Permission permissions = 1;
  string next_page_token = 2;
}

message AssociatePermissionsToRoleRequest {
  string name = 1;
  authwise.auth.v1alpha1.AssociationRequest association = 2;
}

		
message CreateRoleRequest {
  string parent = 1;
  authwise.auth.v1alpha1.Role role = 2;
}

message UpdateRoleRequest {
  string name = 1;
  authwise.auth.v1alpha1.Role role = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message DeleteRoleRequest {
  string name = 1;
}


message GetPermissionRequest {
  string name = 1;
}

message ListPermissionsRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListPermissionsResponse {
  repeated authwise.auth.v1alpha1.Permission permissions = 1;
  string next_page_token = 2;
}

message CreatePermissionRequest {
  string parent = 1;
  authwise.auth.v1alpha1.Permission permission = 2;
}

message UpdatePermissionRequest {
  string name = 1;
  authwise.auth.v1alpha1.Permission permission = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message DeletePermissionRequest {
  string name = 1;
}


message GetAudienceRequest {
  string name = 1;
}

message ListAudiencesRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListAudiencesResponse {
  repeated authwise.auth.v1alpha1.Audience audiences = 1;
  string next_page_token = 2;
}

message CreateAudienceRequest {
  string parent = 1;
  authwise.auth.v1alpha1.Audience audience = 2;
  bool create_default_scopes = 3;
}

message UpdateAudienceRequest {
  string name = 1;
  authwise.auth.v1alpha1.Audience audience = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message DeleteAudienceRequest {
  string name = 1;
}


message GetScopeRequest {
  string name = 1;
}

message ListScopesRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListScopesResponse {
  repeated authwise.auth.v1alpha1.Scope scopes = 1;
  string next_page_token = 2;
}

message ListPermissionsByScopeRequest {
  string name = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListPermissionsByScopeResponse {
  repeated authwise.auth.v1alpha1.Permission permissions = 1;
  string next_page_token = 2;
}

message AssociatePermissionsToScopeRequest {
  string name = 1;
  authwise.auth.v1alpha1.AssociationRequest association = 2;
}

		
message CreateScopeRequest {
  string parent = 1;
  authwise.auth.v1alpha1.Scope scope = 2;
}

message UpdateScopeRequest {
  string name = 1;
  authwise.auth.v1alpha1.Scope scope = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message DeleteScopeRequest {
  string name = 1;
}


message GetEventRequest {
  string name = 1;
}

message ListEventsRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListEventsResponse {
  repeated authwise.auth.v1alpha1.Event events = 1;
  string next_page_token = 2;
}

message GetAppearanceProfileRequest {
  string name = 1;
}

message ListAppearanceProfilesRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListAppearanceProfilesResponse {
  repeated authwise.auth.v1alpha1.AppearanceProfile appearance_profiles = 1;
  string next_page_token = 2;
}

message CreateAppearanceProfileRequest {
  string parent = 1;
  authwise.auth.v1alpha1.AppearanceProfile appearance_profile = 2;
}

message UpdateAppearanceProfileRequest {
  string name = 1;
  authwise.auth.v1alpha1.AppearanceProfile appearance_profile = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message DeleteAppearanceProfileRequest {
  string name = 1;
}


message GetThemeRequest {
  string name = 1;
}

message ListThemesRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
}

message ListThemesResponse {
  repeated authwise.auth.v1alpha1.Theme themes = 1;
  string next_page_token = 2;
}

message CreateThemeRequest {
  string parent = 1;
  authwise.auth.v1alpha1.Theme theme = 2;
}

message UpdateThemeRequest {
  string name = 1;
  authwise.auth.v1alpha1.Theme theme = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message DeleteThemeRequest {
  string name = 1;
}



